数据量:
ArrayList:排序
lms

占用cpu高

启动速度10s：
100个线程被启动了

交互优化：
方向：UI绘制、应用启动、页面跳转、事件响应

页面绘制：
主要原因是绘制的层级深、页面复杂、刷新不合理、由于这些原因导致卡顿的场景更多出现在UI和启动后的初始界面以及跳转到页面的绘制上。

数据处理：
导致这种卡顿场景的原因是数据处理量太大，一般分为三种情况
    一是UI线程在处理数据
    二是数据处理占用CPU高，导致主线程拿不到时间片  ---》创建了100多个线程，线程频繁调度,占用CPU，导致主线程拿不到时间片
    三是内存增加导致GC频繁从而引起卡顿

100个线程
cpu 线程
线程池
asyctask:线程池、等待队列、执行队列
okhttp

new、draw、 刷新、动画 ---》都不能new,连new String，因为会不断GC
GC:停止线程上所有工作，给GC让道，频繁的GC，就出现卡顿，所以卡顿就出现了

偶现卡顿？

ViewPager + Fragment
头条、微信、简书、知乎，也完全采用这个UI的框架

启动：预加载
小米：pagerView:白屏
但是google,进行对pagerView进行修改优化，于是改成叫ViewPager

头条视频类的app，需要优化，解决启动慢、启动的卡顿
改变:
整体更加的流畅

ViewPager + Fragment + 懒加载

懒加载：过程、原理。
核心：setUserVisibleHint?为什么是核心？懒加载合理的吗？
需要结合fragment生命周期来搞。

setUserVisibleHint()逻辑：
viewPager:预加载的原理--->源码

适配方案:adapter. View
UI:
序列化:fastJason、gson，尽量使用gson
json:反射，适配器
gson解析原理：
反射：创建一个Bean，解析String，基于""的变量，反射:Bean类里面的set get，赋值。
技术：gson速度，确保数据不会丢失。

适配：T --》 bean ---》 T class 反射。

ViewPager：
// 填充
populate()
setOffscreenPageLimit(int limit);//默认是缓存1个页面

ViewPgaer2 基于RecycleView，和ViewPage机制完全不一样。

缓存:
ArrayList<ItemInfo>
static class ItemInfo {
    Object object; fragment
}

ViewPager:缓存、预加载,问题
fragment:
list?  两个list持有了一个Fragment,当前的一帧.  static list 导致的。

看见一部分，划不动。

调优：
懒加载:


setUserVisibleHint(); 逻辑
fragment生命周期管理机制
// 初始化item (适配器)
setUserVisibleHint(false) //不可见
                            // 可见
                            PagerAdapter里初始化和设置当前fragment主动调用。
attach，不走

finishUpdate():
commitAllowingStateLoss  会触发fragment生命周期
触发器:commit
栈：

懒加载：可见的时候才加载数据,不可见停止加载数据
淘宝: P7: 首页开发? 原理：

启动ViewPager，此时默认tab没有进行懒加载，需要补充分发。

4--->跳到第3页面： 2停止
懒加载不严谨
3---》1  1停止3停止1刷新1刷新

内存抖动：

懒加载不严谨？
加条件
可见--->不可见
不可见--->可见：瞬间

逻辑、原理一定得搞清。
